"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mapper = void 0;
var lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
function isPrimitive(val) {
    if (typeof val === 'object') {
        return val === null;
    }
    return typeof val !== 'function';
}
var Mapper = /** @class */ (function () {
    function Mapper(sourceType, targetType) {
        this.mappings = [];
        this.sourceType = sourceType;
        this.targetType = targetType;
    }
    /**
     * map corresponding property directly, 'deep' indicates whether to deep clone this property
     * @param propertyKey
     * @param deep
     * @returns
     */
    Mapper.prototype.directMap = function (propertyKey, deep) {
        var _this = this;
        if (deep === void 0) { deep = false; }
        if (Array.isArray(propertyKey)) {
            propertyKey.forEach(function (key) { return _this._map(key, deep); });
        }
        else {
            this._map(propertyKey, deep);
        }
        return this;
    };
    /**
     * map corresponding property by a mapping function, expecting mapping function to have a return value
     * @param propertyKey
     * @param mappingFn
     * @returns
     */
    Mapper.prototype.map = function (propertyKey, mappingFn) {
        this._map(propertyKey, false, mappingFn);
        return this;
    };
    Mapper.prototype._map = function (propertyKey, deep, mappingFn) {
        if (mappingFn) {
            this.mappings.push({
                propertyKey: propertyKey,
                mappingFn: mappingFn,
                deep: deep,
            });
        }
        else {
            this.mappings.push({
                propertyKey: propertyKey,
                deep: deep,
                mappingFn: function (source) {
                    if (propertyKey in source) {
                        var key = propertyKey;
                        return source[key];
                    }
                    return undefined;
                },
            });
        }
        return this;
    };
    /**
     * map an object of source type to an object of target type
     * @param source
     * @returns
     */
    Mapper.prototype.exec = function (source) {
        var target = new this.targetType();
        this.mappings.forEach(function (mapping) {
            var mappingResult = mapping.mappingFn(source);
            if (isPrimitive(mappingResult) || !mapping.deep) {
                target[mapping.propertyKey] = mappingResult;
            }
            else {
                target[mapping.propertyKey] = (0, lodash_clonedeep_1.default)(mappingResult);
            }
        });
        return target;
    };
    return Mapper;
}());
exports.Mapper = Mapper;
